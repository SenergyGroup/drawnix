---
// pages/videos/[...slug].astro
import { getCollection, getEntry } from 'astro:content'; // Add getEntry
import VideoPost from '../../layouts/VideoPost.astro';
// No need for CollectionEntry type here if we fetch fresh

export async function getStaticPaths() {
  const posts = await getCollection('videos');
  return posts.map((post) => ({
    params: { slug: post.id }, // Use post.id for the slug parameter
    // We only need to pass the identifier for getEntry, not the whole post object
    props: { entryId: post.id },
  }));
}

// Get the id from props (passed from getStaticPaths)
const { entryId } = Astro.props;

// Fetch the specific entry using its ID.
// The second argument to getEntry is the slug/id of the entry.
const post = await getEntry('videos', entryId);

// Handle cases where the entry might not be found (optional, but good practice)
if (!post) {
  // You could return a 404 response or redirect
  // For simplicity, this example doesn't, but Astro might 404 automatically
  // if getEntry returns undefined. Better to be explicit:
  return new Response(null, { status: 404, statusText: 'Not Found' });
}

// Now, 'post' obtained from getEntry should be a complete CollectionEntry
// with a .render() method (assuming MDX integration is correct)
const { Content } = await post.render();
---

<VideoPost {...post.data}>
  <Content />
</VideoPost>