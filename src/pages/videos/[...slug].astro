---
// pages/videos/[...slug].astro
import { getCollection, getEntry } from 'astro:content'; // Add getEntry
import VideoPost from '../../layouts/VideoPost.astro';
// No need for CollectionEntry type here if we fetch fresh

export async function getStaticPaths() {
  const posts = await getCollection('videos');
  return posts.map((post) => ({
    // Use post.slug for the URL parameter
    params: { slug: post.slug }, // e.g., "example-video"
    // Pass post.slug to be used by getEntry
    props: { entrySlug: post.slug }, // Changed prop name for clarity
  }));
}

// Get the id from props (passed from getStaticPaths)
const { entrySlug } = Astro.props; // Use the new prop name

// Fetch the specific entry using its ID.
// The second argument to getEntry is the slug/id of the entry.
const post = await getEntry('videos', entrySlug); // e.g., getEntry('videos', 'example-video')

// Handle cases where the entry might not be found (optional, but good practice)
if (!post) {
  return new Response(null, { status: 404, statusText: `Not Found (video entry: ${entrySlug})` });
}

// --- DEBUG LOGS (can be kept or removed once working) ---
console.log('--- DEBUG: Individual Video Post (Using Slug) ---');
console.log('Fetching video with entrySlug:', entrySlug);
console.log('Post object found:', !!post);
if (post) {
    console.log('Post ID:', post.id); // Will be "example-video.mdx"
    console.log('Post Slug:', post.slug); // Will be "example-video"
    console.log('Post Keys:', Object.keys(post));
    console.log('Does post have .render method?', typeof post.render === 'function');
}
console.log('--- END DEBUG: Individual Video Post (Using Slug) ---');
// --- END DEBUG LOGS ---

const { Content } = await post.render();
---

<VideoPost {...post.data}>
  <Content />
</VideoPost>